// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/rpc/rpc.proto

//import "google/protobuf/empty.proto";

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsExhange_Update_FullMethodName       = "/rpc.MetricsExhange/Update"
	MetricsExhange_Updates_FullMethodName      = "/rpc.MetricsExhange/Updates"
	MetricsExhange_GetValue_FullMethodName     = "/rpc.MetricsExhange/GetValue"
	MetricsExhange_CryptUpdates_FullMethodName = "/rpc.MetricsExhange/CryptUpdates"
)

// MetricsExhangeClient is the client API for MetricsExhange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsExhangeClient interface {
	Update(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*MetricsUpdateResponse, error)
	Updates(ctx context.Context, in *MetricsArray, opts ...grpc.CallOption) (*MetricsUpdatesResponse, error)
	GetValue(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Metrics, error)
	CryptUpdates(ctx context.Context, in *CryptMetrics, opts ...grpc.CallOption) (*MetricsUpdatesResponse, error)
}

type metricsExhangeClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsExhangeClient(cc grpc.ClientConnInterface) MetricsExhangeClient {
	return &metricsExhangeClient{cc}
}

func (c *metricsExhangeClient) Update(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*MetricsUpdateResponse, error) {
	out := new(MetricsUpdateResponse)
	err := c.cc.Invoke(ctx, MetricsExhange_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsExhangeClient) Updates(ctx context.Context, in *MetricsArray, opts ...grpc.CallOption) (*MetricsUpdatesResponse, error) {
	out := new(MetricsUpdatesResponse)
	err := c.cc.Invoke(ctx, MetricsExhange_Updates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsExhangeClient) GetValue(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Metrics, error) {
	out := new(Metrics)
	err := c.cc.Invoke(ctx, MetricsExhange_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsExhangeClient) CryptUpdates(ctx context.Context, in *CryptMetrics, opts ...grpc.CallOption) (*MetricsUpdatesResponse, error) {
	out := new(MetricsUpdatesResponse)
	err := c.cc.Invoke(ctx, MetricsExhange_CryptUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsExhangeServer is the server API for MetricsExhange service.
// All implementations must embed UnimplementedMetricsExhangeServer
// for forward compatibility
type MetricsExhangeServer interface {
	Update(context.Context, *Metrics) (*MetricsUpdateResponse, error)
	Updates(context.Context, *MetricsArray) (*MetricsUpdatesResponse, error)
	GetValue(context.Context, *Metrics) (*Metrics, error)
	CryptUpdates(context.Context, *CryptMetrics) (*MetricsUpdatesResponse, error)
	mustEmbedUnimplementedMetricsExhangeServer()
}

// UnimplementedMetricsExhangeServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsExhangeServer struct {
}

func (UnimplementedMetricsExhangeServer) Update(context.Context, *Metrics) (*MetricsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetricsExhangeServer) Updates(context.Context, *MetricsArray) (*MetricsUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedMetricsExhangeServer) GetValue(context.Context, *Metrics) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedMetricsExhangeServer) CryptUpdates(context.Context, *CryptMetrics) (*MetricsUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CryptUpdates not implemented")
}
func (UnimplementedMetricsExhangeServer) mustEmbedUnimplementedMetricsExhangeServer() {}

// UnsafeMetricsExhangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsExhangeServer will
// result in compilation errors.
type UnsafeMetricsExhangeServer interface {
	mustEmbedUnimplementedMetricsExhangeServer()
}

func RegisterMetricsExhangeServer(s grpc.ServiceRegistrar, srv MetricsExhangeServer) {
	s.RegisterService(&MetricsExhange_ServiceDesc, srv)
}

func _MetricsExhange_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsExhangeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsExhange_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsExhangeServer).Update(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsExhange_Updates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsExhangeServer).Updates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsExhange_Updates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsExhangeServer).Updates(ctx, req.(*MetricsArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsExhange_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsExhangeServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsExhange_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsExhangeServer).GetValue(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsExhange_CryptUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsExhangeServer).CryptUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsExhange_CryptUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsExhangeServer).CryptUpdates(ctx, req.(*CryptMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsExhange_ServiceDesc is the grpc.ServiceDesc for MetricsExhange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsExhange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MetricsExhange",
	HandlerType: (*MetricsExhangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _MetricsExhange_Update_Handler,
		},
		{
			MethodName: "Updates",
			Handler:    _MetricsExhange_Updates_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _MetricsExhange_GetValue_Handler,
		},
		{
			MethodName: "CryptUpdates",
			Handler:    _MetricsExhange_CryptUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/rpc/rpc.proto",
}
